<!--

    Copyright Â© 2016-2024 The Thingsboard Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.thingsboard</groupId>
    <artifactId>docker</artifactId>
    <version>1.19.0</version>
    <packaging>pom</packaging>

    <name>ThingsBoard Base Docker images</name>
    <url>https://thingsboard.io</url>
    <inceptionYear>2016</inceptionYear>

    <properties>
        <main.dir>${basedir}</main.dir>
        <pkg.user>thingsboard</pkg.user>
        <docker.repo>thingsboard</docker.repo>
        <alpine.version>3.22</alpine.version>
        <debian.codename>bookworm-slim</debian.codename>
        <docker.output.type>registry</docker.output.type>
        <docker.cache>--no-cache</docker.cache>
        <docker.pull>--pull</docker.pull>
        <dockerfile.skip>true</dockerfile.skip>
        <haproxy.version>2.2.33</haproxy.version>
        <node.version>22.20.0</node.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <docker.push-arm-amd-image.phase>none</docker.push-arm-amd-image.phase>
        <docker.push-arm-amd-image-latest.phase>none</docker.push-arm-amd-image-latest.phase>
        <docker.push-arm-amd-image-debian-codename.phase>none</docker.push-arm-amd-image-debian-codename.phase>
        <docker.push-arm-amd-image-node-version-debian-codename.phase>none</docker.push-arm-amd-image-node-version-debian-codename.phase>
        <docker.push-arm-amd-image-haproxy-certbot.phase>none</docker.push-arm-amd-image-haproxy-certbot.phase>
        <docker.platform>linux/amd64,linux/arm64,linux/arm/v7</docker.platform>
    </properties>

    <modules>
        <module>base</module>
        <module>node</module>
        <module>openjdk11</module>
        <module>openjdk17</module>
        <module>openjdk21</module>
        <module>haproxy-certbot</module>
        <module>website</module>
        <module>toolbox</module>
        <module>medusa</module>
        <module>kubectl</module>
        <module>connectivity</module>
    </modules>

    <profiles>
        <profile>
            <id>push-docker-amd-arm-images</id>
            <activation>
                <property>
                    <name>push-docker-amd-arm-images</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>push-latest-docker-amd-arm-images</id>
                                <phase>${docker.push-arm-amd-image-latest.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>build</argument>
                                        <argument>${docker.cache}</argument> <!-- this is important to stay up to date with apt repos -->
                                        <argument>${docker.pull}</argument> <!-- this is important to stay up to date with docker repo -->
                                        <argument>-t</argument>
                                        <argument>${docker.repo}/${docker.name}:latest</argument>
                                        <argument>--platform=${docker.platform}</argument>
                                        <argument>-o</argument>
                                        <argument>type=${docker.output.type}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-version-docker-amd-arm-images</id>
                                <phase>${docker.push-arm-amd-image.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${docker.repo}/${docker.name}:${project.version}</argument>
                                        <argument>--platform=${docker.platform}</argument>
                                        <argument>-o</argument>
                                        <argument>type=${docker.output.type}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-debian-codename-docker-amd-arm-images</id>
                                <phase>${docker.push-arm-amd-image-debian-codename.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${docker.repo}/${docker.name}:${debian.codename}</argument>
                                        <argument>--platform=${docker.platform}</argument>
                                        <argument>-o</argument>
                                        <argument>type=${docker.output.type}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-debian-codename-node-version-docker-amd-arm-images</id>
                                <phase>${docker.push-arm-amd-image-node-version-debian-codename.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${docker.repo}/${docker.name}:${node.version}-${debian.codename}</argument>
                                        <argument>--platform=${docker.platform}</argument>
                                        <argument>-o</argument>
                                        <argument>type=${docker.output.type}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-debian-codename-haproxy-certbot-docker-amd-arm-images</id>
                                <phase>${docker.push-arm-amd-image-haproxy-certbot.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${docker.repo}/${docker.name}:${haproxy.version}-alpine</argument>
                                        <argument>--platform=${docker.platform}</argument>
                                        <argument>-o</argument>
                                        <argument>type=${docker.output.type}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>1.4.13</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.7</version>
                </plugin>
                <plugin>
                    <groupId>com.mycila</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>3.0</version>
                    <configuration>
                        <header>${main.dir}/license-header-template.txt</header>
                        <properties>
                            <owner>The Thingsboard Authors</owner>
                        </properties>
                        <excludes>>
                            <exclude>**/README</exclude>
                            <exclude>**/LICENSE</exclude>
                        </excludes>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
